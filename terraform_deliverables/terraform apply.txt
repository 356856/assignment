PS C:\Users\fakruddinsohai\Downloads\Terraform> .\terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.eip will be created
  + resource "aws_eip" "eip" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + customer_owned_ip = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + vpc               = true
    }

  # aws_instance.ec2_devops will be created
  + resource "aws_instance" "ec2_devops" {
      + ami                          = "ami-05f112c29645f0812"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "tcc1_ssh_key"
      + network_interface_id         = (known after apply)
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Environment" = "devops"
          + "Name"        = "ec2_devops"
        }
      + tenancy                      = (known after apply)
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.ec2-key will be created
  + resource "aws_key_pair" "ec2-key" {
      + arn         = (known after apply)
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "tcc1_ssh_key"
      + key_pair_id = (known after apply)
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCkxW6xer5buJeiW445xIZsEfkk9IKEdJ5YHENap9WT2Qmk0lqv0+PI5EfAbAMEQzKKLy/SdZsstzgvFG/PO+jOzCf0y/EffkiBLysoFDpmN8kT42MC+S0zwN24mYXmIFlFr8z2fE2HX3WwWXMfKm+yDRpCPQHR9AyN97R7Ofv05aKD0QAjptmV9wwbs7eidcFi/+zVN6+YKiBKshsryhZxHwN2f2kuDi/+Z/+PXb/nXyqhME767D+5uaY053SMWDBI6FqhU2rO5FVBv4eDxEeHAiB1BcQ6XgYAhVAijJ0Lnk19sfW4FiarvSVJ7Pg+pQRCNoMb7em5/SrZs47W5AR7"
    }

  # aws_network_acl.allowall will be created
  + resource "aws_network_acl" "allowall" {
      + arn        = (known after apply)
      + egress     = [
          + {
              + action          = "allow"
              + cidr_block      = "0.0.0.0/0"
              + from_port       = 0
              + icmp_code       = null
              + icmp_type       = null
              + ipv6_cidr_block = ""
              + protocol        = "-1"
              + rule_no         = 100
              + to_port         = 0
            },
        ]
      + id         = (known after apply)
      + ingress    = [
          + {
              + action          = "allow"
              + cidr_block      = "0.0.0.0/0"
              + from_port       = 0
              + icmp_code       = null
              + icmp_type       = null
              + ipv6_cidr_block = ""
              + protocol        = "-1"
              + rule_no         = 100
              + to_port         = 0
            },
        ]
      + owner_id   = (known after apply)
      + subnet_ids = (known after apply)
      + vpc_id     = (known after apply)
    }

  # aws_route_table.default will be created
  + resource "aws_route_table" "default" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                = "0.0.0.0/0"
              + egress_only_gateway_id    = ""
              + gateway_id                = (known after apply)
              + instance_id               = ""
              + ipv6_cidr_block           = ""
              + nat_gateway_id            = ""
              + network_interface_id      = ""
              + transit_gateway_id        = ""
              + vpc_peering_connection_id = ""
            },
        ]
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.route_table_asso will be created
  + resource "aws_route_table_association" "route_table_asso" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.allow_tls will be created
  + resource "aws_security_group" "allow_tls" {
      + arn                    = (known after apply)
      + description            = "Allow 22 and 80 from anywhere"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "ssh from VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "web from VPC"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "sg_devops"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.sub_public_devops will be created
  + resource "aws_subnet" "sub_public_devops" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.vpc_devops will be created
  + resource "aws_vpc" "vpc_devops" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = (known after apply)
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
    }

Plan: 10 to add, 0 to change, 0 to destroy.


Warning: Quoted references are deprecated

  on main.tf line 92, in resource "aws_eip" "eip":
  92:   depends_on = ["aws_internet_gateway.igw"]

In this context, references are expected literally rather than in quotes.
Terraform 0.11 and earlier required quotes, but quoted references are now
deprecated and will be removed in a future version of Terraform. Remove the
quotes surrounding this reference to silence this warning.


Warning: Interpolation-only expressions are deprecated

  on main.tf line 103, in resource "aws_instance" "ec2_devops":
 103:   key_name = "${aws_key_pair.ec2-key.key_name}"

Terraform 0.11 and earlier required all non-constant expressions to be
provided via interpolation syntax, but this pattern is now deprecated. To
silence this warning, remove the "${ sequence from the start and the }"
sequence from the end of this expression, leaving just the inner expression.

Template interpolation syntax is still used to construct strings from
expressions when the template includes multiple interpolation sequences or a
mixture of literal strings and interpolations. This deprecation applies only
to templates that consist entirely of a single interpolation sequence.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_key_pair.ec2-key: Creating...
aws_vpc.vpc_devops: Creating...
aws_key_pair.ec2-key: Creation complete after 0s [id=tcc1_ssh_key]
aws_vpc.vpc_devops: Creation complete after 2s [id=vpc-0219ca11dd7e1f2cf]
aws_subnet.sub_public_devops: Creating...
aws_internet_gateway.igw: Creating...
aws_network_acl.allowall: Creating...
aws_security_group.allow_tls: Creating...
aws_network_acl.allowall: Creation complete after 1s [id=acl-0b00da863c1b4e51a]
aws_subnet.sub_public_devops: Creation complete after 1s [id=subnet-08fc0acfd33795c66]
aws_internet_gateway.igw: Creation complete after 1s [id=igw-069a1ebf248f79630]
aws_route_table.default: Creating...
aws_route_table.default: Creation complete after 1s [id=rtb-0d195850173e989e0]
aws_route_table_association.route_table_asso: Creating...
aws_security_group.allow_tls: Creation complete after 2s [id=sg-012ee6fa656cfc9bc]
aws_instance.ec2_devops: Creating...
aws_route_table_association.route_table_asso: Creation complete after 1s [id=rtbassoc-0da79d95e62fc3d6a]
aws_instance.ec2_devops: Still creating... [10s elapsed]
aws_instance.ec2_devops: Still creating... [20s elapsed]
aws_instance.ec2_devops: Still creating... [30s elapsed]
aws_instance.ec2_devops: Creation complete after 31s [id=i-0f78cc365c8b13b20]
aws_eip.eip: Creating...
aws_eip.eip: Creation complete after 0s [id=eipalloc-085b8b139a1b45de0]

Apply complete! Resources: 10 added, 0 changed, 0 destroyed.

Outputs:

public_ip = 52.74.236.0
PS C:\Users\fakruddinsohai\Downloads\Terraform> 